
ByggernAtmega2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800200  0000031a  000003ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000031a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080020e  0080020e  000003bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000180  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000141f  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000094e  00000000  00000000  0000198b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b91  00000000  00000000  000022d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000388  00000000  00000000  00002e6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000051d  00000000  00000000  000031f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b83  00000000  00000000  00003711  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000110  00000000  00000000  00004294  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e1       	ldi	r30, 0x1A	; 26
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ae 30       	cpi	r26, 0x0E	; 14
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ae e0       	ldi	r26, 0x0E	; 14
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a4 31       	cpi	r26, 0x14	; 20
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	27 d0       	rcall	.+78     	; 0x16e <main>
 120:	fa c0       	rjmp	.+500    	; 0x316 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <CAN_init>:


//uint8_t CAN_transmit(const uint8_t * data, uint8_t data_size);
//void CAN_recive(uint16_t * address, uint8_t * data, uint8_t * data_size);

void CAN_init() {
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	1f 92       	push	r1
 12a:	cd b7       	in	r28, 0x3d	; 61
 12c:	de b7       	in	r29, 0x3e	; 62
	MCP2515_reset();
 12e:	79 d0       	rcall	.+242    	; 0x222 <MCP2515_reset>
	
	uint8_t cmd[] = {MCP_RXBnCTRL_NOFILTER_bm};
 130:	80 e6       	ldi	r24, 0x60	; 96
 132:	89 83       	std	Y+1, r24	; 0x01
	MCP2515_write(MCP_RXB0CTRL, cmd, 1); //Set to no filter
 134:	41 e0       	ldi	r20, 0x01	; 1
 136:	be 01       	movw	r22, r28
 138:	6f 5f       	subi	r22, 0xFF	; 255
 13a:	7f 4f       	sbci	r23, 0xFF	; 255
 13c:	2e d0       	rcall	.+92     	; 0x19a <MCP2515_write>
	
	MCP2515_bit_modify(MCP_CANINTE, 0b00000001,1); //Enable Interrupt on RX0
 13e:	41 e0       	ldi	r20, 0x01	; 1
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	8b e2       	ldi	r24, 0x2B	; 43
 144:	58 d0       	rcall	.+176    	; 0x1f6 <MCP2515_bit_modify>
	
	//MCP2515_bit_modify(MCP_CANCTRL, 0b11100000, MODE_LOOPBACK);
	MCP2515_bit_modify(MCP_CANCTRL, 0b11100000, MODE_NORMAL);
 146:	40 e0       	ldi	r20, 0x00	; 0
 148:	60 ee       	ldi	r22, 0xE0	; 224
 14a:	8f e0       	ldi	r24, 0x0F	; 15
 14c:	54 d0       	rcall	.+168    	; 0x1f6 <MCP2515_bit_modify>
}
 14e:	0f 90       	pop	r0
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <internal_ADC_init>:
#include "internal_ADC.h"

//Initialize ADC on A0
void internal_ADC_init() {
	//Set MUXER
	ADMUX = (0b01 << REFS0) | (0b0000) | (1 << ADLAR) | (0b10 << REFS0); //Select ADC0 and internal Referance and left adjust
 156:	80 ee       	ldi	r24, 0xE0	; 224
 158:	80 93 7c 00 	sts	0x007C, r24
	ADCSRB = (0b0 << MUX5);
 15c:	10 92 7b 00 	sts	0x007B, r1
	ADCSRA = (0b1 << ADEN) | (0b111 << ADPS0); // Endable ADC and set prescalar to 64
 160:	87 e8       	ldi	r24, 0x87	; 135
 162:	80 93 7a 00 	sts	0x007A, r24
	DIDR0 = 1; //Disable digital buffer on ADC0
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	80 93 7e 00 	sts	0x007E, r24
 16c:	08 95       	ret

0000016e <main>:
#include "CAN_buffer.h"
#include "internal_ADC.h"

int main(void)
{
	timer_init_fast_pwm_0();
 16e:	9e d0       	rcall	.+316    	; 0x2ac <timer_init_fast_pwm_0>
	uart_init();
 170:	b4 d0       	rcall	.+360    	; 0x2da <uart_init>
	internal_ADC_init();
 172:	f1 df       	rcall	.-30     	; 0x156 <internal_ADC_init>
	spi_init();
 174:	65 d0       	rcall	.+202    	; 0x240 <spi_init>
	CAN_init();
 176:	d6 df       	rcall	.-84     	; 0x124 <CAN_init>
	sei();
 178:	78 94       	sei
	stdout = &uart_stream;
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	92 e0       	ldi	r25, 0x02	; 2
 17e:	90 93 11 02 	sts	0x0211, r25
 182:	80 93 10 02 	sts	0x0210, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 186:	2f ef       	ldi	r18, 0xFF	; 255
 188:	81 ee       	ldi	r24, 0xE1	; 225
 18a:	94 e0       	ldi	r25, 0x04	; 4
 18c:	21 50       	subi	r18, 0x01	; 1
 18e:	80 40       	sbci	r24, 0x00	; 0
 190:	90 40       	sbci	r25, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <main+0x1e>
 194:	00 c0       	rjmp	.+0      	; 0x196 <main+0x28>
 196:	00 00       	nop
 198:	f6 cf       	rjmp	.-20     	; 0x186 <main+0x18>

0000019a <MCP2515_write>:
	
	//CS_LOW
	//Send MCP_READ_STATUS
	//Read 8bit data
	//CS_low
}
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	cd b7       	in	r28, 0x3d	; 61
 1a0:	de b7       	in	r29, 0x3e	; 62
 1a2:	2c 97       	sbiw	r28, 0x0c	; 12
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	f8 94       	cli
 1a8:	de bf       	out	0x3e, r29	; 62
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	cd bf       	out	0x3d, r28	; 61
 1ae:	4e 5f       	subi	r20, 0xFE	; 254
 1b0:	92 e0       	ldi	r25, 0x02	; 2
 1b2:	99 83       	std	Y+1, r25	; 0x01
 1b4:	8a 83       	std	Y+2, r24	; 0x02
 1b6:	84 2f       	mov	r24, r20
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	03 97       	sbiw	r24, 0x03	; 3
 1bc:	7c f0       	brlt	.+30     	; 0x1dc <MCP2515_write+0x42>
 1be:	a6 2f       	mov	r26, r22
 1c0:	b7 2f       	mov	r27, r23
 1c2:	fe 01       	movw	r30, r28
 1c4:	33 96       	adiw	r30, 0x03	; 3
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	8c 0f       	add	r24, r28
 1cc:	9d 1f       	adc	r25, r29
 1ce:	84 0f       	add	r24, r20
 1d0:	91 1d       	adc	r25, r1
 1d2:	2d 91       	ld	r18, X+
 1d4:	21 93       	st	Z+, r18
 1d6:	e8 17       	cp	r30, r24
 1d8:	f9 07       	cpc	r31, r25
 1da:	d9 f7       	brne	.-10     	; 0x1d2 <MCP2515_write+0x38>
 1dc:	64 2f       	mov	r22, r20
 1de:	ce 01       	movw	r24, r28
 1e0:	01 96       	adiw	r24, 0x01	; 1
 1e2:	4c d0       	rcall	.+152    	; 0x27c <spi_transmit>
 1e4:	2c 96       	adiw	r28, 0x0c	; 12
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	f8 94       	cli
 1ea:	de bf       	out	0x3e, r29	; 62
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	cd bf       	out	0x3d, r28	; 61
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	08 95       	ret

000001f6 <MCP2515_bit_modify>:

void MCP2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data) {
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	00 d0       	rcall	.+0      	; 0x1fc <MCP2515_bit_modify+0x6>
 1fc:	1f 92       	push	r1
 1fe:	cd b7       	in	r28, 0x3d	; 61
 200:	de b7       	in	r29, 0x3e	; 62
	uint8_t  bts[] = {MCP_BITMOD, address, mask, data};
 202:	95 e0       	ldi	r25, 0x05	; 5
 204:	99 83       	std	Y+1, r25	; 0x01
 206:	8a 83       	std	Y+2, r24	; 0x02
 208:	6b 83       	std	Y+3, r22	; 0x03
 20a:	4c 83       	std	Y+4, r20	; 0x04
	spi_transmit(bts, 4);
 20c:	64 e0       	ldi	r22, 0x04	; 4
 20e:	ce 01       	movw	r24, r28
 210:	01 96       	adiw	r24, 0x01	; 1
 212:	34 d0       	rcall	.+104    	; 0x27c <spi_transmit>
	//Send MCP_BIT_MODIFY
	//Send Address
	//Send Mask
	//Send data
	//CS HIGH
}
 214:	0f 90       	pop	r0
 216:	0f 90       	pop	r0
 218:	0f 90       	pop	r0
 21a:	0f 90       	pop	r0
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	08 95       	ret

00000222 <MCP2515_reset>:

void MCP2515_reset() {
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	1f 92       	push	r1
 228:	cd b7       	in	r28, 0x3d	; 61
 22a:	de b7       	in	r29, 0x3e	; 62
	uint8_t cmd[] = {MCP_RESET};
 22c:	80 ec       	ldi	r24, 0xC0	; 192
 22e:	89 83       	std	Y+1, r24	; 0x01
	spi_transmit(cmd, 1);
 230:	61 e0       	ldi	r22, 0x01	; 1
 232:	ce 01       	movw	r24, r28
 234:	01 96       	adiw	r24, 0x01	; 1
 236:	22 d0       	rcall	.+68     	; 0x27c <spi_transmit>
	
	//CS LOW
	//Send MCP_RESET
	//CS HIGH
 238:	0f 90       	pop	r0
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	08 95       	ret

00000240 <spi_init>:


void spi_receive(uint8_t * recieve_data, uint8_t data_length){
	uint8_t dummy_data[MAX_CAN_LENGTH];
	spi_transmit_recieve(dummy_data, recieve_data, data_length);
}
 240:	84 b1       	in	r24, 0x04	; 4
 242:	87 68       	ori	r24, 0x87	; 135
 244:	84 b9       	out	0x04, r24	; 4
 246:	85 b1       	in	r24, 0x05	; 5
 248:	81 68       	ori	r24, 0x81	; 129
 24a:	85 b9       	out	0x05, r24	; 5
 24c:	81 e5       	ldi	r24, 0x51	; 81
 24e:	8c bd       	out	0x2c, r24	; 44
 250:	08 95       	ret

00000252 <spi_transmit_recieve>:
 252:	2f 98       	cbi	0x05, 7	; 5
 254:	44 23       	and	r20, r20
 256:	81 f0       	breq	.+32     	; 0x278 <spi_transmit_recieve+0x26>
 258:	28 2f       	mov	r18, r24
 25a:	a6 2f       	mov	r26, r22
 25c:	b7 2f       	mov	r27, r23
 25e:	e8 2f       	mov	r30, r24
 260:	f9 2f       	mov	r31, r25
 262:	81 91       	ld	r24, Z+
 264:	8e bd       	out	0x2e, r24	; 46
 266:	0d b4       	in	r0, 0x2d	; 45
 268:	07 fe       	sbrs	r0, 7
 26a:	fd cf       	rjmp	.-6      	; 0x266 <spi_transmit_recieve+0x14>
 26c:	8e b5       	in	r24, 0x2e	; 46
 26e:	8d 93       	st	X+, r24
 270:	8e 2f       	mov	r24, r30
 272:	82 1b       	sub	r24, r18
 274:	84 17       	cp	r24, r20
 276:	a8 f3       	brcs	.-22     	; 0x262 <spi_transmit_recieve+0x10>
 278:	2f 9a       	sbi	0x05, 7	; 5
 27a:	08 95       	ret

0000027c <spi_transmit>:

void spi_transmit(uint8_t * send_data,uint8_t data_length){
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	cd b7       	in	r28, 0x3d	; 61
 282:	de b7       	in	r29, 0x3e	; 62
 284:	2c 97       	sbiw	r28, 0x0c	; 12
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	f8 94       	cli
 28a:	de bf       	out	0x3e, r29	; 62
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	cd bf       	out	0x3d, r28	; 61
 290:	46 2f       	mov	r20, r22
	uint8_t dummy_recieve [MAX_CAN_LENGTH];
	spi_transmit_recieve(send_data, dummy_recieve, data_length);
 292:	be 01       	movw	r22, r28
 294:	6f 5f       	subi	r22, 0xFF	; 255
 296:	7f 4f       	sbci	r23, 0xFF	; 255
 298:	dc df       	rcall	.-72     	; 0x252 <spi_transmit_recieve>
}
 29a:	2c 96       	adiw	r28, 0x0c	; 12
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	f8 94       	cli
 2a0:	de bf       	out	0x3e, r29	; 62
 2a2:	0f be       	out	0x3f, r0	; 63
 2a4:	cd bf       	out	0x3d, r28	; 61
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <timer_init_fast_pwm_0>:
#define PWM_TOP F_CPU*2/(PWM_PRESCALER*100)

//Initalizes and starts a PWM signal on pin 5/PE3
void timer_init_fast_pwm_0() {

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 2ac:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 2ae:	f8 94       	cli
		DDRE |= (1 << PE3);
 2b0:	6b 9a       	sbi	0x0d, 3	; 13
		TCCR3A = (0b10 << COM3A0) |  (0b10 << WGM30) ;	//Toggle OC1A on Compare Match, OC1B and OC1C disconnected
 2b2:	82 e8       	ldi	r24, 0x82	; 130
 2b4:	80 93 90 00 	sts	0x0090, r24
														//Set Wave gen to 14 (Fast PWM) and 
		TCCR3B = (0b010 << CS30) | (0b11 << WGM32);		//Prescaler to 8
 2b8:	8a e1       	ldi	r24, 0x1A	; 26
 2ba:	80 93 91 00 	sts	0x0091, r24
		ICR3 = PWM_TOP;
 2be:	80 e4       	ldi	r24, 0x40	; 64
 2c0:	9c e9       	ldi	r25, 0x9C	; 156
 2c2:	90 93 97 00 	sts	0x0097, r25
 2c6:	80 93 96 00 	sts	0x0096, r24
		OCR3A = PWM_TOP/20;
 2ca:	80 ed       	ldi	r24, 0xD0	; 208
 2cc:	97 e0       	ldi	r25, 0x07	; 7
 2ce:	90 93 99 00 	sts	0x0099, r25
 2d2:	80 93 98 00 	sts	0x0098, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 2d6:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 2d8:	08 95       	ret

000002da <uart_init>:
 
 void uart_init(){
	 
	uint8_t ubrr = F_CPU/16/UART0_BAUD-1;
	 // Set baud rate register
	 UBRR0H = (ubrr >> 8);
 2da:	10 92 c5 00 	sts	0x00C5, r1
	 UBRR0L = ubrr;
 2de:	87 e6       	ldi	r24, 0x67	; 103
 2e0:	80 93 c4 00 	sts	0x00C4, r24
	 
	 //Enable UART RX/TX
	 UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 2e4:	88 e1       	ldi	r24, 0x18	; 24
 2e6:	80 93 c1 00 	sts	0x00C1, r24
	 
	 //Set USRC register access and Set 8bit data,
	 UCSR0C = (1<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
 2ea:	8e e0       	ldi	r24, 0x0E	; 14
 2ec:	80 93 c2 00 	sts	0x00C2, r24
 2f0:	08 95       	ret

000002f2 <uart_transmit>:
	
 }
 
 uint8_t uart_transmit(unsigned char data){
	//Wait for UART transmit ready flag
	while(!(UCSR0A & (1<<UDRE0)));
 2f2:	e0 ec       	ldi	r30, 0xC0	; 192
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	90 81       	ld	r25, Z
 2f8:	95 ff       	sbrs	r25, 5
 2fa:	fd cf       	rjmp	.-6      	; 0x2f6 <uart_transmit+0x4>
	UDR0 = data;
 2fc:	80 93 c6 00 	sts	0x00C6, r24
	return 0;
}
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	08 95       	ret

00000304 <uart_recive>:
	}
}

bool uart_is_ready_read() {
	//Check UART receive ready flag
	return UCSR0A & (1<<RXC0); 
 304:	80 91 c0 00 	lds	r24, 0x00C0
	UDR0 = data;
	return 0;
}

uint8_t uart_recive(){	
	if (uart_is_ready_read()) {
 308:	88 23       	and	r24, r24
 30a:	1c f4       	brge	.+6      	; 0x312 <uart_recive+0xe>
		return UDR0;
 30c:	80 91 c6 00 	lds	r24, 0x00C6
 310:	08 95       	ret
	} else {
		return _FDEV_ERR;
 312:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
 314:	08 95       	ret

00000316 <_exit>:
 316:	f8 94       	cli

00000318 <__stop_program>:
 318:	ff cf       	rjmp	.-2      	; 0x318 <__stop_program>
